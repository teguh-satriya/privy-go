// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/teguh-satriya/privy-go/models"
)

// CakesRepository is an autogenerated mock type for the CakesRepository type
type CakesRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cake
func (_m *CakesRepository) Create(ctx context.Context, cake *models.Cakes) (*int64, error) {
	ret := _m.Called(ctx, cake)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(context.Context, *models.Cakes) *int64); ok {
		r0 = rf(ctx, cake)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Cakes) error); ok {
		r1 = rf(ctx, cake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CakesRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *CakesRepository) Get(ctx context.Context, id int) (*models.Cakes, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Cakes
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Cakes); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cakes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *CakesRepository) List(ctx context.Context) ([]models.Cakes, error) {
	ret := _m.Called(ctx)

	var r0 []models.Cakes
	if rf, ok := ret.Get(0).(func(context.Context) []models.Cakes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Cakes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, cake
func (_m *CakesRepository) Update(ctx context.Context, cake *models.Cakes) error {
	ret := _m.Called(ctx, cake)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Cakes) error); ok {
		r0 = rf(ctx, cake)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCakesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCakesRepository creates a new instance of CakesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCakesRepository(t mockConstructorTestingTNewCakesRepository) *CakesRepository {
	mock := &CakesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
