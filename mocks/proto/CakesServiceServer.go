// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cakesv1 "github.com/teguh-satriya/privy-go/proto/cakes/v1"

	mock "github.com/stretchr/testify/mock"
)

// CakesServiceServer is an autogenerated mock type for the CakesServiceServer type
type CakesServiceServer struct {
	mock.Mock
}

// CreateCake provides a mock function with given fields: _a0, _a1
func (_m *CakesServiceServer) CreateCake(_a0 context.Context, _a1 *cakesv1.CreateCakeRequest) (*cakesv1.CreateCakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cakesv1.CreateCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.CreateCakeRequest) *cakesv1.CreateCakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.CreateCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.CreateCakeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCake provides a mock function with given fields: _a0, _a1
func (_m *CakesServiceServer) DeleteCake(_a0 context.Context, _a1 *cakesv1.DeleteCakeRequest) (*cakesv1.DeleteCakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cakesv1.DeleteCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.DeleteCakeRequest) *cakesv1.DeleteCakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.DeleteCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.DeleteCakeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCake provides a mock function with given fields: _a0, _a1
func (_m *CakesServiceServer) GetCake(_a0 context.Context, _a1 *cakesv1.GetCakeRequest) (*cakesv1.GetCakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cakesv1.GetCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.GetCakeRequest) *cakesv1.GetCakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.GetCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.GetCakeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCakes provides a mock function with given fields: _a0, _a1
func (_m *CakesServiceServer) ListCakes(_a0 context.Context, _a1 *cakesv1.ListCakesRequest) (*cakesv1.ListCakesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cakesv1.ListCakesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.ListCakesRequest) *cakesv1.ListCakesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.ListCakesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.ListCakesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCake provides a mock function with given fields: _a0, _a1
func (_m *CakesServiceServer) UpdateCake(_a0 context.Context, _a1 *cakesv1.UpdateCakeRequest) (*cakesv1.UpdateCakeResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cakesv1.UpdateCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.UpdateCakeRequest) *cakesv1.UpdateCakeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.UpdateCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.UpdateCakeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCakesServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewCakesServiceServer creates a new instance of CakesServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCakesServiceServer(t mockConstructorTestingTNewCakesServiceServer) *CakesServiceServer {
	mock := &CakesServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
