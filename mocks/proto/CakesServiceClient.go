// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cakesv1 "github.com/teguh-satriya/privy-go/proto/cakes/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// CakesServiceClient is an autogenerated mock type for the CakesServiceClient type
type CakesServiceClient struct {
	mock.Mock
}

// CreateCake provides a mock function with given fields: ctx, in, opts
func (_m *CakesServiceClient) CreateCake(ctx context.Context, in *cakesv1.CreateCakeRequest, opts ...grpc.CallOption) (*cakesv1.CreateCakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cakesv1.CreateCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.CreateCakeRequest, ...grpc.CallOption) *cakesv1.CreateCakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.CreateCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.CreateCakeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCake provides a mock function with given fields: ctx, in, opts
func (_m *CakesServiceClient) DeleteCake(ctx context.Context, in *cakesv1.DeleteCakeRequest, opts ...grpc.CallOption) (*cakesv1.DeleteCakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cakesv1.DeleteCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.DeleteCakeRequest, ...grpc.CallOption) *cakesv1.DeleteCakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.DeleteCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.DeleteCakeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCake provides a mock function with given fields: ctx, in, opts
func (_m *CakesServiceClient) GetCake(ctx context.Context, in *cakesv1.GetCakeRequest, opts ...grpc.CallOption) (*cakesv1.GetCakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cakesv1.GetCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.GetCakeRequest, ...grpc.CallOption) *cakesv1.GetCakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.GetCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.GetCakeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCakes provides a mock function with given fields: ctx, in, opts
func (_m *CakesServiceClient) ListCakes(ctx context.Context, in *cakesv1.ListCakesRequest, opts ...grpc.CallOption) (*cakesv1.ListCakesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cakesv1.ListCakesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.ListCakesRequest, ...grpc.CallOption) *cakesv1.ListCakesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.ListCakesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.ListCakesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCake provides a mock function with given fields: ctx, in, opts
func (_m *CakesServiceClient) UpdateCake(ctx context.Context, in *cakesv1.UpdateCakeRequest, opts ...grpc.CallOption) (*cakesv1.UpdateCakeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cakesv1.UpdateCakeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cakesv1.UpdateCakeRequest, ...grpc.CallOption) *cakesv1.UpdateCakeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cakesv1.UpdateCakeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cakesv1.UpdateCakeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCakesServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCakesServiceClient creates a new instance of CakesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCakesServiceClient(t mockConstructorTestingTNewCakesServiceClient) *CakesServiceClient {
	mock := &CakesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
