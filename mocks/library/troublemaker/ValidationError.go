// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ValidationError is an autogenerated mock type for the ValidationError type
type ValidationError struct {
	mock.Mock
}

// Cause provides a mock function with given fields:
func (_m *ValidationError) Cause() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ErrorName provides a mock function with given fields:
func (_m *ValidationError) ErrorName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Field provides a mock function with given fields:
func (_m *ValidationError) Field() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Key provides a mock function with given fields:
func (_m *ValidationError) Key() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Reason provides a mock function with given fields:
func (_m *ValidationError) Reason() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewValidationError interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidationError creates a new instance of ValidationError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidationError(t mockConstructorTestingTNewValidationError) *ValidationError {
	mock := &ValidationError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
