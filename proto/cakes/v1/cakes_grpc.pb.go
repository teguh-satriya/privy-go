// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cakesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CakesServiceClient is the client API for CakesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CakesServiceClient interface {
	CreateCake(ctx context.Context, in *CreateCakeRequest, opts ...grpc.CallOption) (*CreateCakeResponse, error)
	GetCake(ctx context.Context, in *GetCakeRequest, opts ...grpc.CallOption) (*GetCakeResponse, error)
	ListCakes(ctx context.Context, in *ListCakesRequest, opts ...grpc.CallOption) (*ListCakesResponse, error)
	UpdateCake(ctx context.Context, in *UpdateCakeRequest, opts ...grpc.CallOption) (*UpdateCakeResponse, error)
	DeleteCake(ctx context.Context, in *DeleteCakeRequest, opts ...grpc.CallOption) (*DeleteCakeResponse, error)
}

type cakesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCakesServiceClient(cc grpc.ClientConnInterface) CakesServiceClient {
	return &cakesServiceClient{cc}
}

func (c *cakesServiceClient) CreateCake(ctx context.Context, in *CreateCakeRequest, opts ...grpc.CallOption) (*CreateCakeResponse, error) {
	out := new(CreateCakeResponse)
	err := c.cc.Invoke(ctx, "/cakes.v1.CakesService/CreateCake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakesServiceClient) GetCake(ctx context.Context, in *GetCakeRequest, opts ...grpc.CallOption) (*GetCakeResponse, error) {
	out := new(GetCakeResponse)
	err := c.cc.Invoke(ctx, "/cakes.v1.CakesService/GetCake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakesServiceClient) ListCakes(ctx context.Context, in *ListCakesRequest, opts ...grpc.CallOption) (*ListCakesResponse, error) {
	out := new(ListCakesResponse)
	err := c.cc.Invoke(ctx, "/cakes.v1.CakesService/ListCakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakesServiceClient) UpdateCake(ctx context.Context, in *UpdateCakeRequest, opts ...grpc.CallOption) (*UpdateCakeResponse, error) {
	out := new(UpdateCakeResponse)
	err := c.cc.Invoke(ctx, "/cakes.v1.CakesService/UpdateCake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cakesServiceClient) DeleteCake(ctx context.Context, in *DeleteCakeRequest, opts ...grpc.CallOption) (*DeleteCakeResponse, error) {
	out := new(DeleteCakeResponse)
	err := c.cc.Invoke(ctx, "/cakes.v1.CakesService/DeleteCake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CakesServiceServer is the server API for CakesService service.
// All implementations should embed UnimplementedCakesServiceServer
// for forward compatibility
type CakesServiceServer interface {
	CreateCake(context.Context, *CreateCakeRequest) (*CreateCakeResponse, error)
	GetCake(context.Context, *GetCakeRequest) (*GetCakeResponse, error)
	ListCakes(context.Context, *ListCakesRequest) (*ListCakesResponse, error)
	UpdateCake(context.Context, *UpdateCakeRequest) (*UpdateCakeResponse, error)
	DeleteCake(context.Context, *DeleteCakeRequest) (*DeleteCakeResponse, error)
}

// UnimplementedCakesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCakesServiceServer struct {
}

func (UnimplementedCakesServiceServer) CreateCake(context.Context, *CreateCakeRequest) (*CreateCakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCake not implemented")
}
func (UnimplementedCakesServiceServer) GetCake(context.Context, *GetCakeRequest) (*GetCakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCake not implemented")
}
func (UnimplementedCakesServiceServer) ListCakes(context.Context, *ListCakesRequest) (*ListCakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCakes not implemented")
}
func (UnimplementedCakesServiceServer) UpdateCake(context.Context, *UpdateCakeRequest) (*UpdateCakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCake not implemented")
}
func (UnimplementedCakesServiceServer) DeleteCake(context.Context, *DeleteCakeRequest) (*DeleteCakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCake not implemented")
}

// UnsafeCakesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CakesServiceServer will
// result in compilation errors.
type UnsafeCakesServiceServer interface {
	mustEmbedUnimplementedCakesServiceServer()
}

func RegisterCakesServiceServer(s grpc.ServiceRegistrar, srv CakesServiceServer) {
	s.RegisterService(&CakesService_ServiceDesc, srv)
}

func _CakesService_CreateCake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakesServiceServer).CreateCake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cakes.v1.CakesService/CreateCake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakesServiceServer).CreateCake(ctx, req.(*CreateCakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakesService_GetCake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakesServiceServer).GetCake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cakes.v1.CakesService/GetCake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakesServiceServer).GetCake(ctx, req.(*GetCakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakesService_ListCakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakesServiceServer).ListCakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cakes.v1.CakesService/ListCakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakesServiceServer).ListCakes(ctx, req.(*ListCakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakesService_UpdateCake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakesServiceServer).UpdateCake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cakes.v1.CakesService/UpdateCake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakesServiceServer).UpdateCake(ctx, req.(*UpdateCakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CakesService_DeleteCake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CakesServiceServer).DeleteCake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cakes.v1.CakesService/DeleteCake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CakesServiceServer).DeleteCake(ctx, req.(*DeleteCakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CakesService_ServiceDesc is the grpc.ServiceDesc for CakesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CakesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cakes.v1.CakesService",
	HandlerType: (*CakesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCake",
			Handler:    _CakesService_CreateCake_Handler,
		},
		{
			MethodName: "GetCake",
			Handler:    _CakesService_GetCake_Handler,
		},
		{
			MethodName: "ListCakes",
			Handler:    _CakesService_ListCakes_Handler,
		},
		{
			MethodName: "UpdateCake",
			Handler:    _CakesService_UpdateCake_Handler,
		},
		{
			MethodName: "DeleteCake",
			Handler:    _CakesService_DeleteCake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cakes/v1/cakes.proto",
}
