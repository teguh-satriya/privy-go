// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: cakes/v1/cakes.proto

package cakesv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Rating      int32  `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`
	Image       string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CreateCakeRequest) Reset() {
	*x = CreateCakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCakeRequest) ProtoMessage() {}

func (x *CreateCakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCakeRequest.ProtoReflect.Descriptor instead.
func (*CreateCakeRequest) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCakeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateCakeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCakeRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *CreateCakeRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type CreateCakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cake `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCakeResponse) Reset() {
	*x = CreateCakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCakeResponse) ProtoMessage() {}

func (x *CreateCakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCakeResponse.ProtoReflect.Descriptor instead.
func (*CreateCakeResponse) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCakeResponse) GetData() *Cake {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCakeRequest) Reset() {
	*x = GetCakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCakeRequest) ProtoMessage() {}

func (x *GetCakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCakeRequest.ProtoReflect.Descriptor instead.
func (*GetCakeRequest) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{2}
}

func (x *GetCakeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cake `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCakeResponse) Reset() {
	*x = GetCakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCakeResponse) ProtoMessage() {}

func (x *GetCakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCakeResponse.ProtoReflect.Descriptor instead.
func (*GetCakeResponse) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{3}
}

func (x *GetCakeResponse) GetData() *Cake {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCakesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCakesRequest) Reset() {
	*x = ListCakesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCakesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCakesRequest) ProtoMessage() {}

func (x *ListCakesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCakesRequest.ProtoReflect.Descriptor instead.
func (*ListCakesRequest) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{4}
}

type ListCakesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Cake `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCakesResponse) Reset() {
	*x = ListCakesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCakesResponse) ProtoMessage() {}

func (x *ListCakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCakesResponse.ProtoReflect.Descriptor instead.
func (*ListCakesResponse) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{5}
}

func (x *ListCakesResponse) GetData() []*Cake {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateCakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Rating      int32  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Image       string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UpdateCakeRequest) Reset() {
	*x = UpdateCakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCakeRequest) ProtoMessage() {}

func (x *UpdateCakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCakeRequest.ProtoReflect.Descriptor instead.
func (*UpdateCakeRequest) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCakeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCakeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateCakeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCakeRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UpdateCakeRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type UpdateCakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cake `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCakeResponse) Reset() {
	*x = UpdateCakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCakeResponse) ProtoMessage() {}

func (x *UpdateCakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCakeResponse.ProtoReflect.Descriptor instead.
func (*UpdateCakeResponse) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCakeResponse) GetData() *Cake {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCakeRequest) Reset() {
	*x = DeleteCakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCakeRequest) ProtoMessage() {}

func (x *DeleteCakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCakeRequest.ProtoReflect.Descriptor instead.
func (*DeleteCakeRequest) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCakeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteCakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCakeResponse) Reset() {
	*x = DeleteCakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCakeResponse) ProtoMessage() {}

func (x *DeleteCakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCakeResponse.ProtoReflect.Descriptor instead.
func (*DeleteCakeResponse) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{9}
}

type Cake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Rating      int32                  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Image       string                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Cake) Reset() {
	*x = Cake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cakes_v1_cakes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cake) ProtoMessage() {}

func (x *Cake) ProtoReflect() protoreflect.Message {
	mi := &file_cakes_v1_cakes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cake.ProtoReflect.Descriptor instead.
func (*Cake) Descriptor() ([]byte, []int) {
	return file_cakes_v1_cakes_proto_rawDescGZIP(), []int{10}
}

func (x *Cake) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cake) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Cake) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cake) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Cake) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Cake) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cake) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_cakes_v1_cakes_proto protoreflect.FileDescriptor

var file_cakes_v1_cakes_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x92,
	0x41, 0x12, 0x32, 0x0a, 0x43, 0x61, 0x6b, 0x65, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x78, 0x96,
	0x01, 0x80, 0x01, 0x03, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x10, 0x03, 0x18, 0x96, 0x01, 0xd0, 0x01,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x0d, 0x32,
	0x0b, 0x43, 0x61, 0x6b, 0x65, 0x20, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x40, 0x00, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x11, 0x32,
	0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x55, 0x52, 0x4c, 0xa2, 0x02, 0x03, 0x75, 0x72, 0x69,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x3a,
	0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x22, 0x67,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6b, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x2a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6b, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x13, 0x92, 0x41, 0x09, 0x32, 0x07, 0x43, 0x61, 0x6b, 0x65, 0x20, 0x49, 0x44, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x40, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x0f, 0x32, 0x0a, 0x43, 0x61,
	0x6b, 0x65, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x78, 0x96, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0x96, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x11, 0x32, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20,
	0x55, 0x52, 0x4c, 0xa2, 0x02, 0x03, 0x75, 0x72, 0x69, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01,
	0x01, 0x88, 0x01, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf2, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x87, 0x05, 0x0a, 0x0c, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6b, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x36, 0x92, 0x41, 0x1f, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x2a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6b, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6b, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x92, 0x41, 0x19, 0x0a, 0x04, 0x43, 0x61,
	0x6b, 0x65, 0x12, 0x08, 0x47, 0x65, 0x74, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x2a, 0x07, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6b, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x92, 0x41, 0x1d, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x2a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6b, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x61, 0x6b, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6b, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b,
	0x92, 0x41, 0x1f, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x2a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6b, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x32, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x92, 0x41, 0x1f, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65,
	0x12, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x43, 0x61, 0x6b, 0x65, 0x2a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42,
	0x95, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x0a, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x67, 0x75, 0x68,
	0x2d, 0x73, 0x61, 0x74, 0x72, 0x69, 0x79, 0x61, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x79, 0x2d, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02,
	0x08, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x43, 0x61, 0x6b, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x43, 0x61,
	0x6b, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cakes_v1_cakes_proto_rawDescOnce sync.Once
	file_cakes_v1_cakes_proto_rawDescData = file_cakes_v1_cakes_proto_rawDesc
)

func file_cakes_v1_cakes_proto_rawDescGZIP() []byte {
	file_cakes_v1_cakes_proto_rawDescOnce.Do(func() {
		file_cakes_v1_cakes_proto_rawDescData = protoimpl.X.CompressGZIP(file_cakes_v1_cakes_proto_rawDescData)
	})
	return file_cakes_v1_cakes_proto_rawDescData
}

var file_cakes_v1_cakes_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cakes_v1_cakes_proto_goTypes = []interface{}{
	(*CreateCakeRequest)(nil),     // 0: cakes.v1.CreateCakeRequest
	(*CreateCakeResponse)(nil),    // 1: cakes.v1.CreateCakeResponse
	(*GetCakeRequest)(nil),        // 2: cakes.v1.GetCakeRequest
	(*GetCakeResponse)(nil),       // 3: cakes.v1.GetCakeResponse
	(*ListCakesRequest)(nil),      // 4: cakes.v1.ListCakesRequest
	(*ListCakesResponse)(nil),     // 5: cakes.v1.ListCakesResponse
	(*UpdateCakeRequest)(nil),     // 6: cakes.v1.UpdateCakeRequest
	(*UpdateCakeResponse)(nil),    // 7: cakes.v1.UpdateCakeResponse
	(*DeleteCakeRequest)(nil),     // 8: cakes.v1.DeleteCakeRequest
	(*DeleteCakeResponse)(nil),    // 9: cakes.v1.DeleteCakeResponse
	(*Cake)(nil),                  // 10: cakes.v1.Cake
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_cakes_v1_cakes_proto_depIdxs = []int32{
	10, // 0: cakes.v1.CreateCakeResponse.data:type_name -> cakes.v1.Cake
	10, // 1: cakes.v1.GetCakeResponse.data:type_name -> cakes.v1.Cake
	10, // 2: cakes.v1.ListCakesResponse.data:type_name -> cakes.v1.Cake
	10, // 3: cakes.v1.UpdateCakeResponse.data:type_name -> cakes.v1.Cake
	11, // 4: cakes.v1.Cake.created_at:type_name -> google.protobuf.Timestamp
	11, // 5: cakes.v1.Cake.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 6: cakes.v1.CakesService.CreateCake:input_type -> cakes.v1.CreateCakeRequest
	2,  // 7: cakes.v1.CakesService.GetCake:input_type -> cakes.v1.GetCakeRequest
	4,  // 8: cakes.v1.CakesService.ListCakes:input_type -> cakes.v1.ListCakesRequest
	6,  // 9: cakes.v1.CakesService.UpdateCake:input_type -> cakes.v1.UpdateCakeRequest
	8,  // 10: cakes.v1.CakesService.DeleteCake:input_type -> cakes.v1.DeleteCakeRequest
	1,  // 11: cakes.v1.CakesService.CreateCake:output_type -> cakes.v1.CreateCakeResponse
	3,  // 12: cakes.v1.CakesService.GetCake:output_type -> cakes.v1.GetCakeResponse
	5,  // 13: cakes.v1.CakesService.ListCakes:output_type -> cakes.v1.ListCakesResponse
	7,  // 14: cakes.v1.CakesService.UpdateCake:output_type -> cakes.v1.UpdateCakeResponse
	9,  // 15: cakes.v1.CakesService.DeleteCake:output_type -> cakes.v1.DeleteCakeResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cakes_v1_cakes_proto_init() }
func file_cakes_v1_cakes_proto_init() {
	if File_cakes_v1_cakes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cakes_v1_cakes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCakesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCakesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cakes_v1_cakes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cakes_v1_cakes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cakes_v1_cakes_proto_goTypes,
		DependencyIndexes: file_cakes_v1_cakes_proto_depIdxs,
		MessageInfos:      file_cakes_v1_cakes_proto_msgTypes,
	}.Build()
	File_cakes_v1_cakes_proto = out.File
	file_cakes_v1_cakes_proto_rawDesc = nil
	file_cakes_v1_cakes_proto_goTypes = nil
	file_cakes_v1_cakes_proto_depIdxs = nil
}
